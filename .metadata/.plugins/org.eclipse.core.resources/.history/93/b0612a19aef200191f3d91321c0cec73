package application;

import applicationExtension.SingleAdaptorOutput;
import javafx.collections.ObservableList;

public class ServiceOfAdaptorMessenger {
	private IMessaging sending;
	
	public void sendLongText(String longMessage){
		sending = new AdaptorInputLongText();
		sending.sendTheMessage(doTheBreaking(longMessage));
	}
	
	private String doTheBreaking(String longMessage){
		if(longMessage.length() > 25){
			Integer counterStart = 0;
			Integer counterEnd = 25;
			while (counterSize)
		} else {
			return longMessage;
		}
	}
	
	public void sendShortText(String shortMessage){
		sending = new AdaptorInputShortText();
		sending.sendTheMessage(shortMessage);
	}
	
	public void sendCalculateableText(String operationMessage){
		Integer result = 0;
		if(operationMessage.contains("+"))
			result = doTheOperation(operationMessage.split("+"), Operation.ADDING);
		if(operationMessage.contains("-"))
			result = doTheOperation(operationMessage.split("-"), Operation.SUBTARCTING);
		if(operationMessage.contains("*"))
			result = doTheOperation(operationMessage.split("*"), Operation.MULTIPLYING);
		if(operationMessage.contains("/"))
			result = doTheOperation(operationMessage.split("/"), Operation.DIVIDING);
		
		String finalMessage = result.toString();
		sending = new AdaptorInputCalculateingText();
		sending.sendTheMessage(finalMessage);
	}
	
	private Integer doTheOperation(String[] parts, Operation op ){
		try{
			if(op == Operation.ADDING)
				return Integer.parseInt(parts[0]) + Integer.parseInt(parts[1]);
			else if(op == Operation.SUBTARCTING)
				return Integer.parseInt(parts[0]) - Integer.parseInt(parts[1]);
			else if(op == Operation.MULTIPLYING)
				return (Integer) (Integer.parseInt(parts[0]) * Integer.parseInt(parts[1]));
			else {
				if(parts[1].equals("0"))
					return 0;
				return (Integer)(Integer.parseInt(parts[0]) / Integer.parseInt(parts[1]));
			}
		}catch (Exception e) {
			e.getStackTrace();
		}
		return 0;
	}
	
	private enum Operation {
		ADDING, SUBTARCTING, MULTIPLYING, DIVIDING
	}
	
	
	public ObservableList<String> getBackTheMessageResult(){
		return SingleAdaptorOutput.getTheMessages();
	}
}
